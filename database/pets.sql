PRAGMA foreign_keys = ON;
.mode columns
.headers on
.nullvalue NULL

DROP TABLE IF EXISTS Proposal;
CREATE TABLE Proposal(
id INTEGER PRIMARY KEY AUTOINCREMENT,
idpet INTEGER CONSTRAINT fk_Pet_id REFERENCES Pet(id),
iduser INTEGER CONSTRAINT fk_User_id REFERENCES User(id),
idowner INTEGER CONSTRAINT fk_User_id REFERENCES User(id),
message VARCHAR(1024) NOT NULL
);

DROP TABLE IF EXISTS Favorites;
CREATE TABLE Favorites(
id INTEGER PRIMARY KEY AUTOINCREMENT,
idpet INTEGER CONSTRAINT fk_Pet_id REFERENCES Pet(id),
iduser INTEGER CONSTRAINT fk_User_id REFERENCES User(id)
);

DROP TABLE IF EXISTS Comments;
CREATE TABLE Comments(
id INTEGER PRIMARY KEY AUTOINCREMENT,
idpet INTEGER CONSTRAINT fk_Pet_id REFERENCES Pet(id),
idowner INTEGER CONSTRAINT fk_User_id REFERENCES User(id),
idparent INTEGER NOT NULL,
message VARCHAR(1024) NOT NULL
);

DROP TABLE IF EXISTS PetPhotos;
CREATE TABLE PetPhotos(
idpet INTEGER CONSTRAINT fk_Pet_id REFERENCES Pet(id),
idphoto INTEGER,
FOREIGN KEY(idphoto) REFERENCES Photo(id)
);

DROP TABLE IF EXISTS Pet;
CREATE TABLE Pet (
id INTEGER PRIMARY KEY AUTOINCREMENT,
idphoto INTEGER CONSTRAINT fk_Photo_id REFERENCES Photo(id),
idowner INTEGER CONSTRAINT fk_User_id REFERENCES User(id),
name VARCHAR(256) NOT NULL,
age INTEGER NOT NULL,
location VARCHAR(256) NOT NULL,
species VARCHAR(20) NOT NULL,
size VARCHAR(20) NOT NULL,
status INTEGER NOT NULL CHECK(status IN(0, 1))
); 

DROP TABLE IF EXISTS User;
CREATE TABLE User (
id INTEGER PRIMARY KEY AUTOINCREMENT,
username VARCHAR(256) UNIQUE NOT NULL,
pwhash VARCHAR(256) NOT NULL,
name VARCHAR(256),
email VARCHAR(256) UNIQUE NOT NULL
);

DROP TABLE IF EXISTS Photo;
CREATE TABLE Photo(
id INTEGER PRIMARY KEY AUTOINCREMENT,
path VARCHAR(256) UNIQUE NOT NULL
);

DROP TABLE IF EXISTS Proposal;
CREATE TABLE Proposal(
id INTEGER PRIMARY KEY AUTOINCREMENT,
idpet INTEGER CONSTRAINT fk_Pet_id REFERENCES Pet(id),
iduser INTEGER CONSTRAINT fk_User_id REFERENCES User(id),
idowner INTEGER CONSTRAINT fk_User_id REFERENCES User(id)
);
